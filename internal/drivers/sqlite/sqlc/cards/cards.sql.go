// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cards.sql

package mtgDB

import (
	"context"
	"database/sql"
)

const getCard = `-- name: GetCard :one
SELECT 
    c.uuid,
    c.name,
    c.setCode,
    c.manaValue,
    c.rarity,
    c.colors,
    c.types,
    c.number,
    s.name AS setName
FROM 
    cardidentifiers ci
JOIN 
    cards c ON ci.uuid = c.uuid
JOIN 
    sets s ON c.setCode = s.code
WHERE 
    ci.scryfallId = ?
`

type GetCardRow struct {
	Uuid      string  `json:"uuid"`
	Name      string  `json:"name"`
	Setcode   string  `json:"setcode"`
	Manavalue float64 `json:"manavalue"`
	Rarity    string  `json:"rarity"`
	Colors    string  `json:"colors"`
	Types     string  `json:"types"`
	Number    string  `json:"number"`
	Setname   string  `json:"setname"`
}

func (q *Queries) GetCard(ctx context.Context, scryfallid string) (GetCardRow, error) {
	row := q.queryRow(ctx, q.getCardStmt, getCard, scryfallid)
	var i GetCardRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Setcode,
		&i.Manavalue,
		&i.Rarity,
		&i.Colors,
		&i.Types,
		&i.Number,
		&i.Setname,
	)
	return i, err
}

const getCardNameES = `-- name: GetCardNameES :one
SELECT name
FROM cardForeignData
WHERE uuid = ?1 AND language = "Spanish"
`

func (q *Queries) GetCardNameES(ctx context.Context, id sql.NullString) (sql.NullString, error) {
	row := q.queryRow(ctx, q.getCardNameESStmt, getCardNameES, id)
	var name sql.NullString
	err := row.Scan(&name)
	return name, err
}

const getSetName = `-- name: GetSetName :one
SELECT name
FROM sets
WHERE code = ?1
`

func (q *Queries) GetSetName(ctx context.Context, setcode string) (string, error) {
	row := q.queryRow(ctx, q.getSetNameStmt, getSetName, setcode)
	var name string
	err := row.Scan(&name)
	return name, err
}

const getSets = `-- name: GetSets :many
SELECT code, name
FROM sets
WHERE isOnlineOnly = 0
`

type GetSetsRow struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

func (q *Queries) GetSets(ctx context.Context) ([]GetSetsRow, error) {
	rows, err := q.query(ctx, q.getSetsStmt, getSets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSetsRow
	for rows.Next() {
		var i GetSetsRow
		if err := rows.Scan(&i.Code, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cards.sql

package appDB

import (
	"context"
	"database/sql"
)

const cardExists = `-- name: CardExists :one
SELECT EXISTS (
    SELECT 1
    FROM cards
    WHERE id = ?1 AND finish = ?2 AND language = ?3
)
`

type CardExistsParams struct {
	ID       string `json:"id"`
	Finish   string `json:"finish"`
	Language string `json:"language"`
}

func (q *Queries) CardExists(ctx context.Context, arg CardExistsParams) (int64, error) {
	row := q.queryRow(ctx, q.cardExistsStmt, cardExists, arg.ID, arg.Finish, arg.Language)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const createCard = `-- name: CreateCard :exec
INSERT INTO cards (
    id,
    name_en,
    name_es,
    sku,
    url_image,
    set_name,
    set_code,
    mana_value,
    colors,
    types,
    finish,
    has_vendor,
    language,
    visibility,
    image_path,
    image_url,
    stock
) VALUES (
    ?1, ?2, ?3, ?4, ?5, ?6, ?7,
    ?8, ?9, ?10, ?11, ?12, ?13,
    ?14, ?15, ?16, ?17
)
`

type CreateCardParams struct {
	ID         string         `json:"id"`
	NameEs     string         `json:"name_es"`
	NameEn     string         `json:"name_en"`
	Sku        string         `json:"sku"`
	UrlImage   string         `json:"url_image"`
	SetName    string         `json:"set_name"`
	SetCode    string         `json:"set_code"`
	ManaValue  int64          `json:"mana_value"`
	Colors     string         `json:"colors"`
	Types      string         `json:"types"`
	Finish     string         `json:"finish"`
	HasVendor  bool           `json:"has_vendor"`
	Language   string         `json:"language"`
	Visibility string         `json:"visibility"`
	ImagePath  sql.NullString `json:"image_path"`
	ImageUrl   sql.NullString `json:"image_url"`
	Stock      int64          `json:"stock"`
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) error {
	_, err := q.exec(ctx, q.createCardStmt, createCard,
		arg.ID,
		arg.NameEs,
		arg.NameEn,
		arg.Sku,
		arg.UrlImage,
		arg.SetName,
		arg.SetCode,
		arg.ManaValue,
		arg.Colors,
		arg.Types,
		arg.Finish,
		arg.HasVendor,
		arg.Language,
		arg.Visibility,
		arg.ImagePath,
		arg.ImageUrl,
		arg.Stock,
	)
	return err
}

const getCard = `-- name: GetCard :one
SELECT id, name_en, name_es, sku, url_image, set_name, set_code, mana_value, colors, types, finish, has_vendor, language, visibility, image_path, image_url, stock, created_at, updated_at
FROM cards
WHERE id = ?1
`

func (q *Queries) GetCard(ctx context.Context, id string) (Card, error) {
	row := q.queryRow(ctx, q.getCardStmt, getCard, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.NameEn,
		&i.NameEs,
		&i.Sku,
		&i.UrlImage,
		&i.SetName,
		&i.SetCode,
		&i.ManaValue,
		&i.Colors,
		&i.Types,
		&i.Finish,
		&i.HasVendor,
		&i.Language,
		&i.Visibility,
		&i.ImagePath,
		&i.ImageUrl,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCardHasVendorById = `-- name: GetCardHasVendorById :one
SELECT has_vendor
FROM cards
WHERE id = ?1
`

func (q *Queries) GetCardHasVendorById(ctx context.Context, id string) (bool, error) {
	row := q.queryRow(ctx, q.getCardHasVendorByIdStmt, getCardHasVendorById, id)
	var has_vendor bool
	err := row.Scan(&has_vendor)
	return has_vendor, err
}

const getCardStockById = `-- name: GetCardStockById :one
SELECT stock
FROM cards
WHERE id = ?1 AND language = ?2 AND finish = ?3
`

type GetCardStockByIdParams struct {
	ID       string `json:"id"`
	Language string `json:"language"`
	Finish   string `json:"finish"`
}

func (q *Queries) GetCardStockById(ctx context.Context, arg GetCardStockByIdParams) (int64, error) {
	row := q.queryRow(ctx, q.getCardStockByIdStmt, getCardStockById, arg.ID, arg.Language, arg.Finish)
	var stock int64
	err := row.Scan(&stock)
	return stock, err
}

const getPrice = `-- name: GetPrice :one
SELECT price
FROM cards_price
WHERE card_id = ?1 AND finish = ?2
`

type GetPriceParams struct {
	CardID string `json:"cardID"`
	Finish string `json:"finish"`
}

func (q *Queries) GetPrice(ctx context.Context, arg GetPriceParams) (float64, error) {
	row := q.queryRow(ctx, q.getPriceStmt, getPrice, arg.CardID, arg.Finish)
	var price float64
	err := row.Scan(&price)
	return price, err
}

const updateCardStock = `-- name: UpdateCardStock :exec
UPDATE cards
SET stock = ?1
WHERE id = ?2 AND language = ?3 AND finish = ?4
`

type UpdateCardStockParams struct {
	Stock    int64  `json:"stock"`
	ID       string `json:"id"`
	Language string `json:"language"`
	Finish   string `json:"finish"`
}

func (q *Queries) UpdateCardStock(ctx context.Context, arg UpdateCardStockParams) error {
	_, err := q.exec(ctx, q.updateCardStockStmt, updateCardStock,
		arg.Stock,
		arg.ID,
		arg.Language,
		arg.Finish,
	)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package appDB

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.cardExistsStmt, err = db.PrepareContext(ctx, cardExists); err != nil {
		return nil, fmt.Errorf("error preparing query CardExists: %w", err)
	}
	if q.createCardStmt, err = db.PrepareContext(ctx, createCard); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCard: %w", err)
	}
	if q.getCardStmt, err = db.PrepareContext(ctx, getCard); err != nil {
		return nil, fmt.Errorf("error preparing query GetCard: %w", err)
	}
	if q.getCardHasVendorByIdStmt, err = db.PrepareContext(ctx, getCardHasVendorById); err != nil {
		return nil, fmt.Errorf("error preparing query GetCardHasVendorById: %w", err)
	}
	if q.getCardStockByIdStmt, err = db.PrepareContext(ctx, getCardStockById); err != nil {
		return nil, fmt.Errorf("error preparing query GetCardStockById: %w", err)
	}
	if q.getPriceStmt, err = db.PrepareContext(ctx, getPrice); err != nil {
		return nil, fmt.Errorf("error preparing query GetPrice: %w", err)
	}
	if q.updateCardStockStmt, err = db.PrepareContext(ctx, updateCardStock); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCardStock: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.cardExistsStmt != nil {
		if cerr := q.cardExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cardExistsStmt: %w", cerr)
		}
	}
	if q.createCardStmt != nil {
		if cerr := q.createCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCardStmt: %w", cerr)
		}
	}
	if q.getCardStmt != nil {
		if cerr := q.getCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCardStmt: %w", cerr)
		}
	}
	if q.getCardHasVendorByIdStmt != nil {
		if cerr := q.getCardHasVendorByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCardHasVendorByIdStmt: %w", cerr)
		}
	}
	if q.getCardStockByIdStmt != nil {
		if cerr := q.getCardStockByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCardStockByIdStmt: %w", cerr)
		}
	}
	if q.getPriceStmt != nil {
		if cerr := q.getPriceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPriceStmt: %w", cerr)
		}
	}
	if q.updateCardStockStmt != nil {
		if cerr := q.updateCardStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCardStockStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	cardExistsStmt           *sql.Stmt
	createCardStmt           *sql.Stmt
	getCardStmt              *sql.Stmt
	getCardHasVendorByIdStmt *sql.Stmt
	getCardStockByIdStmt     *sql.Stmt
	getPriceStmt             *sql.Stmt
	updateCardStockStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		cardExistsStmt:           q.cardExistsStmt,
		createCardStmt:           q.createCardStmt,
		getCardStmt:              q.getCardStmt,
		getCardHasVendorByIdStmt: q.getCardHasVendorByIdStmt,
		getCardStockByIdStmt:     q.getCardStockByIdStmt,
		getPriceStmt:             q.getPriceStmt,
		updateCardStockStmt:      q.updateCardStockStmt,
	}
}
